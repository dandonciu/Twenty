const container = document.querySelector('.twentytwenty-container');
const before = document.querySelector('.twentytwenty-before');
const handle = document.querySelector('.twentytwenty-handle');
let isDragging = false;

// Funcție pentru actualizare poziție
function updatePosition(clientX) {
    const rect = container.getBoundingClientRect();
    let x = clientX - rect.left;
    
    // Asigură că valoarea este între 0 și lățimea containerului
    x = Math.max(0, Math.min(x, rect.width));
    
    const percent = (x / rect.width) * 100;
    
    before.style.clipPath = `inset(0 ${100 - percent}% 0 0)`;
    handle.style.left = `${percent}%`;
}

// ------ MODIFICARE CHEIE: Acum tot containerul este interactiv ------

// Pornire drag pe mouse
container.addEventListener('mousedown', (e) => {
    isDragging = true;
    updatePosition(e.clientX); // Actualizează poziția la click
    e.preventDefault();
});

// Pornire drag pe touch
container.addEventListener('touchstart', (e) => {
    isDragging = true;
    updatePosition(e.touches[0].clientX);
    e.preventDefault();
}, { passive: true });


// Mișcare (atât pentru mouse, cât și pentru touch)
document.addEventListener('mousemove', (e) => {
    if (!isDragging) return;
    updatePosition(e.clientX);
});

document.addEventListener('touchmove', (e) => {
    if (!isDragging) return;
    updatePosition(e.touches[0].clientX);
});


// Oprire dragging
const stopDragging = () => {
    isDragging = false;
};
document.addEventListener('mouseup', stopDragging);
document.addEventListener('touchend', stopDragging);
document.addEventListener('mouseleave', stopDragging); // Oprește și dacă mouse-ul iese din pagină
